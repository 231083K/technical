name: CI Pipeline for Node.js and React App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: nodeman
          POSTGRES_PASSWORD: password
          POSTGRES_DB: nodeplay
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        node-version: ['23.11.0']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install backend dependencies
        run: npm ci
        working-directory: ./nodeplay

      - name: Run backend tests
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: nodeman
          PGDATABASE: nodeplay
          PGPASSWORD: password
          NODE_ENV: test
        working-directory: ./nodeplay
        run: npm test --if-present

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./reactplay/reactplay
      
      - name: Run frontend tests
        env:
          CI: true
        working-directory: ./reactplay/reactplay
        run: npm test --if-present

      - name: Build frontend
        env:
          REACT_APP_API_BASE_URL: http://54.197.120.188:3001/
        working-directory: ./reactplay/reactplay
        run: npm run build --if-present
      
      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: reactplay/reactplay/build

  deploy:
    name: Deploy to EC2
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-build-downloaded

      - name: Deploy Frontend Files to EC2
        uses: easingthemes/ssh-deploy@v5.0.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc --delete"
          SOURCE: "frontend-build-downloaded/"
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USERNAME }}
          TARGET: /var/www/reactapp

      - name: Deploy Backend Files to EC2
        uses: easingthemes/ssh-deploy@v5.0.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc --delete"
          SOURCE: "nodeplay/"
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USERNAME }}
          TARGET: /home/ec2-user/app/nodeplay
          EXCLUDE: "/node_modules/, /.git/"

      - name: Execute Deployment Commands on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/app/nodeplay
            npm install --production --omit=dev
            if pm2 list | grep -q 'nodeplay-backend'; then
              pm2 reload nodeplay-backend || pm2 restart nodeplay-backend
            else
              pm2 start server.js --name nodeplay-backend
            fi